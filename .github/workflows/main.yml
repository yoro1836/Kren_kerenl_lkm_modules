name: Build LKM Module

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:

      - name: Checkout kernel source code
        uses: actions/checkout@v4
        with:
          repository: yoro1836/Kren_kernel
          ref: S908EXXUBEXK5
          path: kernel_source

      - name: Checkout module source code
        uses: actions/checkout@v4
        with:
          repository: lwfinger/rtw88
          path: module_source

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@main
        with:
            key: lkm-build
            append-timestamp: false
            max-size: 6G
          
      - name: Set up build environment
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev bison flex openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev llvm lld
          sudo apt-get install -y ccache
          echo " " >> ~/.bashrc
          echo "export USE_CCACHE=0" >> ~/.bashrc
          echo "export PATH=$PATH:$(pwd)/toolchain/bin" >> ~/.bashrc
          echo "export ARCH=arm64" >> ~/.bashrc
          echo "export CROSS_COMPILE=aarch64-linux-gnu-" >> ~/.bashrc
          source ~/.bashrc
          wget https://github.com/ZyCromerZ/Clang/releases/download/12.0.1-20230207-release/Clang-12.0.1-20230207.tar.gz -O toolchain.tar.gz
          mkdir toolchain
          tar -xzf toolchain.tar.gz -C toolchain
          export PATH=$PATH:$(pwd)/toolchain/bin
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-

      - name: Prepare kernel headers and build directory
        shell: bash
        working-directory: kernel_source
        run: |
          export PATH="/home/runner/.ccache:$PATH"
          export KBUILD_OUTPUT=$GITHUB_WORKSPACE/kernel_source/build_output
          export INSTALL_HDR_PATH=header_install
          export KCONFIG_CONFIG=.config

          mkdir -p $KBUILD_OUTPUT
          mkdir -p $INSTALL_HDR_PATH

          source ~/.bashrc

          rm -rf $KBUILD_OUTPUT
          rm -f .config

          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1 DEPMOD=depmod DTC=dtc HOSTCC=clang HOSTCXX=clang++ CC=clang \
          mrproper

          ls -al

          make -j$(nproc --all) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1 DEPMOD=depmod DTC=dtc HOSTCC=clang HOSTCXX=clang++ CC=clang \
          kren_defconfig

          ls -al
          make -j$(nproc --all) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1 DEPMOD=depmod DTC=dtc HOSTCC=clang HOSTCXX=clang++ CC=clang \
          oldconfig

          make -j$(nproc --all) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1 DEPMOD=depmod DTC=dtc HOSTCC=clang HOSTCXX=clang++ CC=clang \
          headers_install INSTALL_HDR_PATH=./$INSTALL_HDR_PATH

          make -j$(nproc --all) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1 DEPMOD=depmod DTC=dtc HOSTCC=clang HOSTCXX=clang++ CC=clang \
          modules O=$KBUILD_OUTPUT
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE" # 워크스페이스 경로 출력
          tree -L 2 # 디렉토리 구조 확인

      - name: Compile LKM module
        shell: bash
        working-directory: module_source
        run: |
          source ~/.bashrc
          export KBUILD_OUTPUT=$GITHUB_WORKSPACE/kernel_source/build_output

          pwd
          ls -al $KBUILD_OUTPUT

          make -j$(nproc --all) -C $KBUILD_OUTPUT M=$(pwd) modules ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1 DEPMOD=depmod DTC=dtc HOSTCC=clang HOSTCXX=clang++ CC=clang

      - name: Upload LKM module artifact
        uses: actions/upload-artifact@v4
        with:
          name: lkm_module
          path: kernel_source/module_source/*.ko
